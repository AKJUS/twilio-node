/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V2 from "../../V2";
const deserialize = require("../../../../base/deserialize");
const serialize = require("../../../../base/serialize");
import { isValidPathParam } from "../../../../base/utility";

/**
 * Options to pass to fetch a EncryptedSentencesInstance
 */
export interface EncryptedSentencesContextFetchOptions {
  /** Grant access to PII Redacted/Unredacted Sentences. If redaction is enabled, the default is `true` to access redacted sentences. */
  redacted?: boolean;
}

export interface EncryptedSentencesContext {
  /**
   * Fetch a EncryptedSentencesInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed EncryptedSentencesInstance
   */
  fetch(
    callback?: (error: Error | null, item?: EncryptedSentencesInstance) => any
  ): Promise<EncryptedSentencesInstance>;
  /**
   * Fetch a EncryptedSentencesInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed EncryptedSentencesInstance
   */
  fetch(
    params: EncryptedSentencesContextFetchOptions,
    callback?: (error: Error | null, item?: EncryptedSentencesInstance) => any
  ): Promise<EncryptedSentencesInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface EncryptedSentencesContextSolution {
  transcriptSid: string;
}

export class EncryptedSentencesContextImpl
  implements EncryptedSentencesContext
{
  protected _solution: EncryptedSentencesContextSolution;
  protected _uri: string;

  constructor(protected _version: V2, transcriptSid: string) {
    if (!isValidPathParam(transcriptSid)) {
      throw new Error("Parameter 'transcriptSid' is not valid.");
    }

    this._solution = { transcriptSid };
    this._uri = `/Transcripts/${transcriptSid}/Sentences/Encrypted`;
  }

  fetch(
    params?:
      | EncryptedSentencesContextFetchOptions
      | ((error: Error | null, item?: EncryptedSentencesInstance) => any),
    callback?: (error: Error | null, item?: EncryptedSentencesInstance) => any
  ): Promise<EncryptedSentencesInstance> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

    if (params["redacted"] !== undefined)
      data["Redacted"] = serialize.bool(params["redacted"]);

    const headers: any = {};
    headers["Accept"] = "application/json";

    const instance = this;
    let operationVersion = instance._version,
      operationPromise = operationVersion.fetch({
        uri: instance._uri,
        method: "get",
        params: data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) =>
        new EncryptedSentencesInstance(
          operationVersion,
          payload,
          instance._solution.transcriptSid
        )
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

interface EncryptedSentencesPayload extends EncryptedSentencesResource {}

interface EncryptedSentencesResource {
  location: string;
  transcript_sid: string;
  url: string;
}

export class EncryptedSentencesInstance {
  protected _solution: EncryptedSentencesContextSolution;
  protected _context?: EncryptedSentencesContext;

  constructor(
    protected _version: V2,
    payload: EncryptedSentencesResource,
    transcriptSid: string
  ) {
    this.location = payload.location;
    this.transcriptSid = payload.transcript_sid;
    this.url = payload.url;

    this._solution = { transcriptSid };
  }

  /**
   * The location of the encrypted sentences.
   */
  location: string;
  transcriptSid: string;
  url: string;

  private get _proxy(): EncryptedSentencesContext {
    this._context =
      this._context ||
      new EncryptedSentencesContextImpl(
        this._version,
        this._solution.transcriptSid
      );
    return this._context;
  }

  /**
   * Fetch a EncryptedSentencesInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed EncryptedSentencesInstance
   */
  fetch(
    callback?: (error: Error | null, item?: EncryptedSentencesInstance) => any
  ): Promise<EncryptedSentencesInstance>;
  /**
   * Fetch a EncryptedSentencesInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed EncryptedSentencesInstance
   */
  fetch(
    params: EncryptedSentencesContextFetchOptions,
    callback?: (error: Error | null, item?: EncryptedSentencesInstance) => any
  ): Promise<EncryptedSentencesInstance>;

  fetch(
    params?: any,
    callback?: (error: Error | null, item?: EncryptedSentencesInstance) => any
  ): Promise<EncryptedSentencesInstance> {
    return this._proxy.fetch(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      location: this.location,
      transcriptSid: this.transcriptSid,
      url: this.url,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}

export interface EncryptedSentencesSolution {
  transcriptSid: string;
}

export interface EncryptedSentencesListInstance {
  _version: V2;
  _solution: EncryptedSentencesSolution;
  _uri: string;

  (): EncryptedSentencesContext;
  get(): EncryptedSentencesContext;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function EncryptedSentencesListInstance(
  version: V2,
  transcriptSid: string
): EncryptedSentencesListInstance {
  if (!isValidPathParam(transcriptSid)) {
    throw new Error("Parameter 'transcriptSid' is not valid.");
  }

  const instance = (() => instance.get()) as EncryptedSentencesListInstance;

  instance.get = function get(): EncryptedSentencesContext {
    return new EncryptedSentencesContextImpl(version, transcriptSid);
  };

  instance._version = version;
  instance._solution = { transcriptSid };
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}
