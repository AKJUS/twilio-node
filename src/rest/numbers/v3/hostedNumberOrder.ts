/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { inspect, InspectOptions } from "util";
import V3 from "../V3";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";
import { PhoneNumberCapabilities } from "../../../interfaces";

export type HostedNumberOrderStatus =
  | "twilio-processing"
  | "received"
  | "pending-verification"
  | "verified"
  | "pending-loa"
  | "carrier-processing"
  | "testing"
  | "completed"
  | "failed"
  | "action-required";

export type HostedNumberOrderVerificationType = "phone-call" | "phone-bill";

/**
 * Options to pass to create a HostedNumberOrderInstance
 */
export interface HostedNumberOrderListInstanceCreateOptions {
  /** The number to host in [+E.164](https://en.wikipedia.org/wiki/E.164) format */
  phoneNumber: string;
  /** Used to specify that the SMS capability will be hosted on Twilio\\\'s platform. */
  smsCapability: boolean;
  /** This defaults to the AccountSid of the authorization the user is using. This can be provided to specify a subaccount to add the HostedNumberOrder to. */
  accountSid?: string;
  /** A 64 character string that is a human readable text that describes this resource. */
  friendlyName?: string;
  /** Optional. Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. */
  uniqueName?: string;
  /** Optional. A list of emails that the LOA document for this HostedNumberOrder will be carbon copied to. */
  ccEmails?: Array<string>;
  /** The URL that Twilio should request when somebody sends an SMS to the phone number. This will be copied onto the IncomingPhoneNumber resource. */
  smsUrl?: string;
  /** The HTTP method that should be used to request the SmsUrl. Must be either `GET` or `POST`.  This will be copied onto the IncomingPhoneNumber resource. */
  smsMethod?: string;
  /** A URL that Twilio will request if an error occurs requesting or executing the TwiML defined by SmsUrl. This will be copied onto the IncomingPhoneNumber resource. */
  smsFallbackUrl?: string;
  /** The HTTP method that should be used to request the SmsFallbackUrl. Must be either `GET` or `POST`. This will be copied onto the IncomingPhoneNumber resource. */
  smsFallbackMethod?: string;
  /** Optional. The Status Callback URL attached to the IncomingPhoneNumber resource. */
  statusCallbackUrl?: string;
  /** Optional. The Status Callback Method attached to the IncomingPhoneNumber resource. */
  statusCallbackMethod?: string;
  /** Optional. The 34 character sid of the application Twilio should use to handle SMS messages sent to this number. If a `SmsApplicationSid` is present, Twilio will ignore all of the SMS urls above and use those set on the application. */
  smsApplicationSid?: string;
  /** Optional. A 34 character string that uniquely identifies the Address resource that represents the address of the owner of this phone number. */
  addressSid?: string;
  /** Optional. Email of the owner of this phone number that is being hosted. */
  email?: string;
  /**  */
  verificationType?: HostedNumberOrderVerificationType;
  /** Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill. */
  verificationDocumentSid?: string;
}

export interface HostedNumberOrderSolution {}

export interface HostedNumberOrderListInstance {
  _version: V3;
  _solution: HostedNumberOrderSolution;
  _uri: string;

  /**
   * Create a HostedNumberOrderInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed HostedNumberOrderInstance
   */
  create(
    params: HostedNumberOrderListInstanceCreateOptions,
    callback?: (error: Error | null, item?: HostedNumberOrderInstance) => any
  ): Promise<HostedNumberOrderInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function HostedNumberOrderListInstance(
  version: V3
): HostedNumberOrderListInstance {
  const instance = {} as HostedNumberOrderListInstance;

  instance._version = version;
  instance._solution = {};
  instance._uri = `/HostedNumbers/HostedNumberOrders`;

  instance.create = function create(
    params: HostedNumberOrderListInstanceCreateOptions,
    callback?: (error: Error | null, items: HostedNumberOrderInstance) => any
  ): Promise<HostedNumberOrderInstance> {
    if (params === null || params === undefined) {
      throw new Error('Required parameter "params" missing.');
    }

    if (params["phoneNumber"] === null || params["phoneNumber"] === undefined) {
      throw new Error("Required parameter \"params['phoneNumber']\" missing.");
    }

    if (
      params["smsCapability"] === null ||
      params["smsCapability"] === undefined
    ) {
      throw new Error(
        "Required parameter \"params['smsCapability']\" missing."
      );
    }

    let data: any = {};

    data["phoneNumber"] = params["phoneNumber"];

    data["smsCapability"] = serialize.bool(params["smsCapability"]);
    if (params["accountSid"] !== undefined)
      data["accountSid"] = params["accountSid"];
    if (params["friendlyName"] !== undefined)
      data["friendlyName"] = params["friendlyName"];
    if (params["uniqueName"] !== undefined)
      data["uniqueName"] = params["uniqueName"];
    if (params["ccEmails"] !== undefined)
      data["ccEmails"] = serialize.map(params["ccEmails"], (e: string) => e);
    if (params["smsUrl"] !== undefined) data["smsUrl"] = params["smsUrl"];
    if (params["smsMethod"] !== undefined)
      data["smsMethod"] = params["smsMethod"];
    if (params["smsFallbackUrl"] !== undefined)
      data["smsFallbackUrl"] = params["smsFallbackUrl"];
    if (params["smsFallbackMethod"] !== undefined)
      data["smsFallbackMethod"] = params["smsFallbackMethod"];
    if (params["statusCallbackUrl"] !== undefined)
      data["statusCallbackUrl"] = params["statusCallbackUrl"];
    if (params["statusCallbackMethod"] !== undefined)
      data["statusCallbackMethod"] = params["statusCallbackMethod"];
    if (params["smsApplicationSid"] !== undefined)
      data["smsApplicationSid"] = params["smsApplicationSid"];
    if (params["addressSid"] !== undefined)
      data["addressSid"] = params["addressSid"];
    if (params["email"] !== undefined) data["email"] = params["email"];
    if (params["verificationType"] !== undefined)
      data["verificationType"] = params["verificationType"];
    if (params["verificationDocumentSid"] !== undefined)
      data["verificationDocumentSid"] = params["verificationDocumentSid"];

    const headers: any = {};
    headers["Content-Type"] = "application/x-www-form-urlencoded";
    headers["Accept"] = "application/json";

    let operationVersion = version,
      operationPromise = operationVersion.create({
        uri: instance._uri,
        method: "post",
        data,
        headers,
      });

    operationPromise = operationPromise.then(
      (payload) => new HostedNumberOrderInstance(operationVersion, payload)
    );

    operationPromise = instance._version.setPromiseCallback(
      operationPromise,
      callback
    );
    return operationPromise;
  };

  instance.toJSON = function toJSON() {
    return instance._solution;
  };

  instance[inspect.custom] = function inspectImpl(
    _depth: any,
    options: InspectOptions
  ) {
    return inspect(instance.toJSON(), options);
  };

  return instance;
}

interface HostedNumberOrderPayload extends HostedNumberOrderResource {}

interface HostedNumberOrderResource {
  sid: string;
  accountSid: string;
  incomingPhoneNumberSid: string;
  addressSid: string;
  signingDocumentSid: string;
  phoneNumber: string;
  capabilities: PhoneNumberCapabilities;
  friendlyName: string;
  uniqueName: string;
  status: HostedNumberOrderStatus;
  failureReason: string;
  dateCreated: Date;
  dateUpdated: Date;
  verificationAttempts: number;
  email: string;
  ccEmails: Array<string>;
  url: string;
  verificationType: HostedNumberOrderVerificationType;
  verificationDocumentSid: string;
  extension: string;
  callDelay: number;
  verificationCode: string;
  verificationCallSids: Array<string>;
}

export class HostedNumberOrderInstance {
  constructor(protected _version: V3, payload: HostedNumberOrderResource) {
    this.sid = payload.sid;
    this.accountSid = payload.accountSid;
    this.incomingPhoneNumberSid = payload.incomingPhoneNumberSid;
    this.addressSid = payload.addressSid;
    this.signingDocumentSid = payload.signingDocumentSid;
    this.phoneNumber = payload.phoneNumber;
    this.capabilities = payload.capabilities;
    this.friendlyName = payload.friendlyName;
    this.uniqueName = payload.uniqueName;
    this.status = payload.status;
    this.failureReason = payload.failureReason;
    this.dateCreated = deserialize.iso8601DateTime(payload.dateCreated);
    this.dateUpdated = deserialize.iso8601DateTime(payload.dateUpdated);
    this.verificationAttempts = deserialize.integer(
      payload.verificationAttempts
    );
    this.email = payload.email;
    this.ccEmails = payload.ccEmails;
    this.url = payload.url;
    this.verificationType = payload.verificationType;
    this.verificationDocumentSid = payload.verificationDocumentSid;
    this.extension = payload.extension;
    this.callDelay = deserialize.integer(payload.callDelay);
    this.verificationCode = payload.verificationCode;
    this.verificationCallSids = payload.verificationCallSids;
  }

  /**
   * A 34 character string that uniquely identifies this HostedNumberOrder.
   */
  sid: string;
  /**
   * A 34 character string that uniquely identifies the account.
   */
  accountSid: string;
  /**
   * A 34 character string that uniquely identifies the [IncomingPhoneNumber](https://www.twilio.com/docs/phone-numbers/api/incomingphonenumber-resource) resource that represents the phone number being hosted.
   */
  incomingPhoneNumberSid: string;
  /**
   * A 34 character string that uniquely identifies the Address resource that represents the address of the owner of this phone number.
   */
  addressSid: string;
  /**
   * A 34 character string that uniquely identifies the [Authorization Document](https://www.twilio.com/docs/phone-numbers/hosted-numbers/hosted-numbers-api/authorization-document-resource) the user needs to sign.
   */
  signingDocumentSid: string;
  /**
   * Phone number to be hosted. This must be in [E.164](https://en.wikipedia.org/wiki/E.164) format, e.g., +16175551212
   */
  phoneNumber: string;
  capabilities: PhoneNumberCapabilities;
  /**
   * A 64 character string that is a human-readable text that describes this resource.
   */
  friendlyName: string;
  /**
   * Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID.
   */
  uniqueName: string;
  status: HostedNumberOrderStatus;
  /**
   * A message that explains why a hosted_number_order went to status \"action-required\"
   */
  failureReason: string;
  /**
   * The date this resource was created, given as [GMT RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateCreated: Date;
  /**
   * The date that this resource was updated, given as [GMT RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
   */
  dateUpdated: Date;
  /**
   * The number of attempts made to verify ownership of the phone number that is being hosted.
   */
  verificationAttempts: number;
  /**
   * Email of the owner of this phone number that is being hosted.
   */
  email: string;
  /**
   * A list of emails that LOA document for this HostedNumberOrder will be carbon copied to.
   */
  ccEmails: Array<string>;
  /**
   * The URL of this HostedNumberOrder.
   */
  url: string;
  verificationType: HostedNumberOrderVerificationType;
  /**
   * A 34 character string that uniquely identifies the Identity Document resource that represents the document for verifying ownership of the number to be hosted.
   */
  verificationDocumentSid: string;
  /**
   * A numerical extension to be used when making the ownership verification call.
   */
  extension: string;
  /**
   * A value between 0-30 specifying the number of seconds to delay initiating the ownership verification call.
   */
  callDelay: number;
  /**
   * A verification code provided in the response for a user to enter when they pick up the phone call.
   */
  verificationCode: string;
  /**
   * A list of 34 character strings that are unique identifiers for the calls placed as part of ownership verification.
   */
  verificationCallSids: Array<string>;

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      sid: this.sid,
      accountSid: this.accountSid,
      incomingPhoneNumberSid: this.incomingPhoneNumberSid,
      addressSid: this.addressSid,
      signingDocumentSid: this.signingDocumentSid,
      phoneNumber: this.phoneNumber,
      capabilities: this.capabilities,
      friendlyName: this.friendlyName,
      uniqueName: this.uniqueName,
      status: this.status,
      failureReason: this.failureReason,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      verificationAttempts: this.verificationAttempts,
      email: this.email,
      ccEmails: this.ccEmails,
      url: this.url,
      verificationType: this.verificationType,
      verificationDocumentSid: this.verificationDocumentSid,
      extension: this.extension,
      callDelay: this.callDelay,
      verificationCode: this.verificationCode,
      verificationCallSids: this.verificationCallSids,
    };
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}
